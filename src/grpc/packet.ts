// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v5.26.1
// source: packet.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import Long = require("long");

export const protobufPackage = "packet";

export interface PacketBatch {
  packets: Packet[];
}

export interface Packet {
  data: Uint8Array;
  meta: Meta | undefined;
}

export interface Meta {
  size: string;
  addr: string;
  port: number;
  flags: PacketFlags | undefined;
  senderStake: string;
}

export interface PacketFlags {
  discard: boolean;
  forwarded: boolean;
  repair: boolean;
  simpleVoteTx: boolean;
  tracerPacket: boolean;
}

function createBasePacketBatch(): PacketBatch {
  return { packets: [] };
}

export const PacketBatch = {
  encode(message: PacketBatch, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.packets) {
      Packet.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PacketBatch {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketBatch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.packets.push(Packet.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketBatch {
    return {
      packets: globalThis.Array.isArray(object?.packets) ? object.packets.map((e: any) => Packet.fromJSON(e)) : [],
    };
  },

  toJSON(message: PacketBatch): unknown {
    const obj: any = {};
    if (message.packets?.length) {
      obj.packets = message.packets.map((e) => Packet.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PacketBatch>, I>>(base?: I): PacketBatch {
    return PacketBatch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PacketBatch>, I>>(object: I): PacketBatch {
    const message = createBasePacketBatch();
    message.packets = object.packets?.map((e) => Packet.fromPartial(e)) || [];
    return message;
  },
};

function createBasePacket(): Packet {
  return { data: new Uint8Array(0), meta: undefined };
}

export const Packet = {
  encode(message: Packet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.data.length !== 0) {
      writer.uint32(10).bytes(message.data);
    }
    if (message.meta !== undefined) {
      Meta.encode(message.meta, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Packet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.data = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.meta = Meta.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Packet {
    return {
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
      meta: isSet(object.meta) ? Meta.fromJSON(object.meta) : undefined,
    };
  },

  toJSON(message: Packet): unknown {
    const obj: any = {};
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    if (message.meta !== undefined) {
      obj.meta = Meta.toJSON(message.meta);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Packet>, I>>(base?: I): Packet {
    return Packet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Packet>, I>>(object: I): Packet {
    const message = createBasePacket();
    message.data = object.data ?? new Uint8Array(0);
    message.meta = (object.meta !== undefined && object.meta !== null) ? Meta.fromPartial(object.meta) : undefined;
    return message;
  },
};

function createBaseMeta(): Meta {
  return { size: "0", addr: "", port: 0, flags: undefined, senderStake: "0" };
}

export const Meta = {
  encode(message: Meta, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.size !== "0") {
      writer.uint32(8).uint64(message.size);
    }
    if (message.addr !== "") {
      writer.uint32(18).string(message.addr);
    }
    if (message.port !== 0) {
      writer.uint32(24).uint32(message.port);
    }
    if (message.flags !== undefined) {
      PacketFlags.encode(message.flags, writer.uint32(34).fork()).ldelim();
    }
    if (message.senderStake !== "0") {
      writer.uint32(40).uint64(message.senderStake);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Meta {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.size = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.addr = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.port = reader.uint32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.flags = PacketFlags.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.senderStake = longToString(reader.uint64() as Long);
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Meta {
    return {
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      addr: isSet(object.addr) ? globalThis.String(object.addr) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      flags: isSet(object.flags) ? PacketFlags.fromJSON(object.flags) : undefined,
      senderStake: isSet(object.senderStake) ? globalThis.String(object.senderStake) : "0",
    };
  },

  toJSON(message: Meta): unknown {
    const obj: any = {};
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.addr !== "") {
      obj.addr = message.addr;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.flags !== undefined) {
      obj.flags = PacketFlags.toJSON(message.flags);
    }
    if (message.senderStake !== "0") {
      obj.senderStake = message.senderStake;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Meta>, I>>(base?: I): Meta {
    return Meta.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Meta>, I>>(object: I): Meta {
    const message = createBaseMeta();
    message.size = object.size ?? "0";
    message.addr = object.addr ?? "";
    message.port = object.port ?? 0;
    message.flags = (object.flags !== undefined && object.flags !== null)
      ? PacketFlags.fromPartial(object.flags)
      : undefined;
    message.senderStake = object.senderStake ?? "0";
    return message;
  },
};

function createBasePacketFlags(): PacketFlags {
  return { discard: false, forwarded: false, repair: false, simpleVoteTx: false, tracerPacket: false };
}

export const PacketFlags = {
  encode(message: PacketFlags, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.discard !== false) {
      writer.uint32(8).bool(message.discard);
    }
    if (message.forwarded !== false) {
      writer.uint32(16).bool(message.forwarded);
    }
    if (message.repair !== false) {
      writer.uint32(24).bool(message.repair);
    }
    if (message.simpleVoteTx !== false) {
      writer.uint32(32).bool(message.simpleVoteTx);
    }
    if (message.tracerPacket !== false) {
      writer.uint32(40).bool(message.tracerPacket);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): PacketFlags {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePacketFlags();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.discard = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.forwarded = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.repair = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.simpleVoteTx = reader.bool();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.tracerPacket = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PacketFlags {
    return {
      discard: isSet(object.discard) ? globalThis.Boolean(object.discard) : false,
      forwarded: isSet(object.forwarded) ? globalThis.Boolean(object.forwarded) : false,
      repair: isSet(object.repair) ? globalThis.Boolean(object.repair) : false,
      simpleVoteTx: isSet(object.simpleVoteTx) ? globalThis.Boolean(object.simpleVoteTx) : false,
      tracerPacket: isSet(object.tracerPacket) ? globalThis.Boolean(object.tracerPacket) : false,
    };
  },

  toJSON(message: PacketFlags): unknown {
    const obj: any = {};
    if (message.discard !== false) {
      obj.discard = message.discard;
    }
    if (message.forwarded !== false) {
      obj.forwarded = message.forwarded;
    }
    if (message.repair !== false) {
      obj.repair = message.repair;
    }
    if (message.simpleVoteTx !== false) {
      obj.simpleVoteTx = message.simpleVoteTx;
    }
    if (message.tracerPacket !== false) {
      obj.tracerPacket = message.tracerPacket;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PacketFlags>, I>>(base?: I): PacketFlags {
    return PacketFlags.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PacketFlags>, I>>(object: I): PacketFlags {
    const message = createBasePacketFlags();
    message.discard = object.discard ?? false;
    message.forwarded = object.forwarded ?? false;
    message.repair = object.repair ?? false;
    message.simpleVoteTx = object.simpleVoteTx ?? false;
    message.tracerPacket = object.tracerPacket ?? false;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
