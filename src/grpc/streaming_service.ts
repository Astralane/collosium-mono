// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: streaming_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { TimestampedTransactionUpdate } from "./geyser";
import { PacketBatch } from "./packet";

export const protobufPackage = "streaming_service";

export interface SubscribePacketsRequest {
  apiKey: string;
  accounts: string[];
}

export interface SubscribePacketsResponse {
  batch: PacketBatch | undefined;
}

function createBaseSubscribePacketsRequest(): SubscribePacketsRequest {
  return { apiKey: "", accounts: [] };
}

export const SubscribePacketsRequest = {
  encode(message: SubscribePacketsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.apiKey !== "") {
      writer.uint32(10).string(message.apiKey);
    }
    for (const v of message.accounts) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribePacketsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribePacketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.apiKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.accounts.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribePacketsRequest {
    return {
      apiKey: isSet(object.apiKey) ? globalThis.String(object.apiKey) : "",
      accounts: globalThis.Array.isArray(object?.accounts) ? object.accounts.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: SubscribePacketsRequest): unknown {
    const obj: any = {};
    if (message.apiKey !== "") {
      obj.apiKey = message.apiKey;
    }
    if (message.accounts?.length) {
      obj.accounts = message.accounts;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribePacketsRequest>, I>>(base?: I): SubscribePacketsRequest {
    return SubscribePacketsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribePacketsRequest>, I>>(object: I): SubscribePacketsRequest {
    const message = createBaseSubscribePacketsRequest();
    message.apiKey = object.apiKey ?? "";
    message.accounts = object.accounts?.map((e) => e) || [];
    return message;
  },
};

function createBaseSubscribePacketsResponse(): SubscribePacketsResponse {
  return { batch: undefined };
}

export const SubscribePacketsResponse = {
  encode(message: SubscribePacketsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batch !== undefined) {
      PacketBatch.encode(message.batch, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribePacketsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribePacketsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batch = PacketBatch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribePacketsResponse {
    return { batch: isSet(object.batch) ? PacketBatch.fromJSON(object.batch) : undefined };
  },

  toJSON(message: SubscribePacketsResponse): unknown {
    const obj: any = {};
    if (message.batch !== undefined) {
      obj.batch = PacketBatch.toJSON(message.batch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribePacketsResponse>, I>>(base?: I): SubscribePacketsResponse {
    return SubscribePacketsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribePacketsResponse>, I>>(object: I): SubscribePacketsResponse {
    const message = createBaseSubscribePacketsResponse();
    message.batch = (object.batch !== undefined && object.batch !== null)
      ? PacketBatch.fromPartial(object.batch)
      : undefined;
    return message;
  },
};

export type StreamingServiceService = typeof StreamingServiceService;
export const StreamingServiceService = {
  subscribeUnprocessedPackets: {
    path: "/streaming_service.StreamingService/SubscribeUnprocessedPackets",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SubscribePacketsRequest) => Buffer.from(SubscribePacketsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubscribePacketsRequest.decode(value),
    responseSerialize: (value: SubscribePacketsResponse) =>
      Buffer.from(SubscribePacketsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SubscribePacketsResponse.decode(value),
  },
  subscribeProcessedPackets: {
    path: "/streaming_service.StreamingService/SubscribeProcessedPackets",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SubscribePacketsRequest) => Buffer.from(SubscribePacketsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubscribePacketsRequest.decode(value),
    responseSerialize: (value: TimestampedTransactionUpdate) =>
      Buffer.from(TimestampedTransactionUpdate.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TimestampedTransactionUpdate.decode(value),
  },
} as const;

export interface StreamingServiceServer extends UntypedServiceImplementation {
  subscribeUnprocessedPackets: handleServerStreamingCall<SubscribePacketsRequest, SubscribePacketsResponse>;
  subscribeProcessedPackets: handleServerStreamingCall<SubscribePacketsRequest, TimestampedTransactionUpdate>;
}

export interface StreamingServiceClient extends Client {
  subscribeUnprocessedPackets(
    request: SubscribePacketsRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribePacketsResponse>;
  subscribeUnprocessedPackets(
    request: SubscribePacketsRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribePacketsResponse>;
  subscribeProcessedPackets(
    request: SubscribePacketsRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TimestampedTransactionUpdate>;
  subscribeProcessedPackets(
    request: SubscribePacketsRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TimestampedTransactionUpdate>;
}

export const StreamingServiceClient = makeGenericClientConstructor(
  StreamingServiceService,
  "streaming_service.StreamingService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): StreamingServiceClient;
  service: typeof StreamingServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
