// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: streaming_service.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  ClientReadableStream,
  handleServerStreamingCall,
  makeGenericClientConstructor,
  Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import * as _m0 from "protobufjs/minimal";
import { ConfirmedTransaction } from "./confirmed_block";
import { Timestamp } from "./google/protobuf/timestamp";
import { PacketBatch } from "./packet";
import Long = require("long");

export const protobufPackage = "streaming_service";

export interface TimestampedTransactionUpdate {
  ts: Date | undefined;
  transaction: TransactionUpdate | undefined;
}

export interface TransactionUpdate {
  slot: string;
  signature: string;
  isVote: boolean;
  txIdx: string;
  tx: ConfirmedTransaction | undefined;
}

export interface SubscribeTransactionUpdatesRequest {
}

export interface SubscribePacketsRequest {
  account: string;
}

export interface SubscribePacketsResponse {
  batch: PacketBatch | undefined;
}

function createBaseTimestampedTransactionUpdate(): TimestampedTransactionUpdate {
  return { ts: undefined, transaction: undefined };
}

export const TimestampedTransactionUpdate = {
  encode(message: TimestampedTransactionUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.ts !== undefined) {
      Timestamp.encode(toTimestamp(message.ts), writer.uint32(10).fork()).ldelim();
    }
    if (message.transaction !== undefined) {
      TransactionUpdate.encode(message.transaction, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TimestampedTransactionUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimestampedTransactionUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transaction = TransactionUpdate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimestampedTransactionUpdate {
    return {
      ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined,
      transaction: isSet(object.transaction) ? TransactionUpdate.fromJSON(object.transaction) : undefined,
    };
  },

  toJSON(message: TimestampedTransactionUpdate): unknown {
    const obj: any = {};
    if (message.ts !== undefined) {
      obj.ts = message.ts.toISOString();
    }
    if (message.transaction !== undefined) {
      obj.transaction = TransactionUpdate.toJSON(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TimestampedTransactionUpdate>, I>>(base?: I): TimestampedTransactionUpdate {
    return TimestampedTransactionUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TimestampedTransactionUpdate>, I>>(object: I): TimestampedTransactionUpdate {
    const message = createBaseTimestampedTransactionUpdate();
    message.ts = object.ts ?? undefined;
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? TransactionUpdate.fromPartial(object.transaction)
      : undefined;
    return message;
  },
};

function createBaseTransactionUpdate(): TransactionUpdate {
  return { slot: "0", signature: "", isVote: false, txIdx: "0", tx: undefined };
}

export const TransactionUpdate = {
  encode(message: TransactionUpdate, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.slot !== "0") {
      writer.uint32(8).uint64(message.slot);
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    if (message.isVote !== false) {
      writer.uint32(24).bool(message.isVote);
    }
    if (message.txIdx !== "0") {
      writer.uint32(32).uint64(message.txIdx);
    }
    if (message.tx !== undefined) {
      ConfirmedTransaction.encode(message.tx, writer.uint32(42).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): TransactionUpdate {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slot = longToString(reader.uint64() as Long);
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isVote = reader.bool();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.txIdx = longToString(reader.uint64() as Long);
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.tx = ConfirmedTransaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionUpdate {
    return {
      slot: isSet(object.slot) ? globalThis.String(object.slot) : "0",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      isVote: isSet(object.isVote) ? globalThis.Boolean(object.isVote) : false,
      txIdx: isSet(object.txIdx) ? globalThis.String(object.txIdx) : "0",
      tx: isSet(object.tx) ? ConfirmedTransaction.fromJSON(object.tx) : undefined,
    };
  },

  toJSON(message: TransactionUpdate): unknown {
    const obj: any = {};
    if (message.slot !== "0") {
      obj.slot = message.slot;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.isVote !== false) {
      obj.isVote = message.isVote;
    }
    if (message.txIdx !== "0") {
      obj.txIdx = message.txIdx;
    }
    if (message.tx !== undefined) {
      obj.tx = ConfirmedTransaction.toJSON(message.tx);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionUpdate>, I>>(base?: I): TransactionUpdate {
    return TransactionUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionUpdate>, I>>(object: I): TransactionUpdate {
    const message = createBaseTransactionUpdate();
    message.slot = object.slot ?? "0";
    message.signature = object.signature ?? "";
    message.isVote = object.isVote ?? false;
    message.txIdx = object.txIdx ?? "0";
    message.tx = (object.tx !== undefined && object.tx !== null)
      ? ConfirmedTransaction.fromPartial(object.tx)
      : undefined;
    return message;
  },
};

function createBaseSubscribeTransactionUpdatesRequest(): SubscribeTransactionUpdatesRequest {
  return {};
}

export const SubscribeTransactionUpdatesRequest = {
  encode(_: SubscribeTransactionUpdatesRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribeTransactionUpdatesRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeTransactionUpdatesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubscribeTransactionUpdatesRequest {
    return {};
  },

  toJSON(_: SubscribeTransactionUpdatesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribeTransactionUpdatesRequest>, I>>(
    base?: I,
  ): SubscribeTransactionUpdatesRequest {
    return SubscribeTransactionUpdatesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribeTransactionUpdatesRequest>, I>>(
    _: I,
  ): SubscribeTransactionUpdatesRequest {
    const message = createBaseSubscribeTransactionUpdatesRequest();
    return message;
  },
};

function createBaseSubscribePacketsRequest(): SubscribePacketsRequest {
  return { account: "" };
}

export const SubscribePacketsRequest = {
  encode(message: SubscribePacketsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.account !== "") {
      writer.uint32(10).string(message.account);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribePacketsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribePacketsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.account = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribePacketsRequest {
    return { account: isSet(object.account) ? globalThis.String(object.account) : "" };
  },

  toJSON(message: SubscribePacketsRequest): unknown {
    const obj: any = {};
    if (message.account !== "") {
      obj.account = message.account;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribePacketsRequest>, I>>(base?: I): SubscribePacketsRequest {
    return SubscribePacketsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribePacketsRequest>, I>>(object: I): SubscribePacketsRequest {
    const message = createBaseSubscribePacketsRequest();
    message.account = object.account ?? "";
    return message;
  },
};

function createBaseSubscribePacketsResponse(): SubscribePacketsResponse {
  return { batch: undefined };
}

export const SubscribePacketsResponse = {
  encode(message: SubscribePacketsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.batch !== undefined) {
      PacketBatch.encode(message.batch, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SubscribePacketsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribePacketsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.batch = PacketBatch.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribePacketsResponse {
    return { batch: isSet(object.batch) ? PacketBatch.fromJSON(object.batch) : undefined };
  },

  toJSON(message: SubscribePacketsResponse): unknown {
    const obj: any = {};
    if (message.batch !== undefined) {
      obj.batch = PacketBatch.toJSON(message.batch);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubscribePacketsResponse>, I>>(base?: I): SubscribePacketsResponse {
    return SubscribePacketsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubscribePacketsResponse>, I>>(object: I): SubscribePacketsResponse {
    const message = createBaseSubscribePacketsResponse();
    message.batch = (object.batch !== undefined && object.batch !== null)
      ? PacketBatch.fromPartial(object.batch)
      : undefined;
    return message;
  },
};

export type StreamingServiceService = typeof StreamingServiceService;
export const StreamingServiceService = {
  subscribeUnprocessedPackets: {
    path: "/streaming_service.StreamingService/SubscribeUnprocessedPackets",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SubscribePacketsRequest) => Buffer.from(SubscribePacketsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubscribePacketsRequest.decode(value),
    responseSerialize: (value: SubscribePacketsResponse) =>
      Buffer.from(SubscribePacketsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => SubscribePacketsResponse.decode(value),
  },
  subscribeTransactionUpdates: {
    path: "/streaming_service.StreamingService/SubscribeTransactionUpdates",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SubscribeTransactionUpdatesRequest) =>
      Buffer.from(SubscribeTransactionUpdatesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => SubscribeTransactionUpdatesRequest.decode(value),
    responseSerialize: (value: TimestampedTransactionUpdate) =>
      Buffer.from(TimestampedTransactionUpdate.encode(value).finish()),
    responseDeserialize: (value: Buffer) => TimestampedTransactionUpdate.decode(value),
  },
} as const;

export interface StreamingServiceServer extends UntypedServiceImplementation {
  subscribeUnprocessedPackets: handleServerStreamingCall<SubscribePacketsRequest, SubscribePacketsResponse>;
  subscribeTransactionUpdates: handleServerStreamingCall<
    SubscribeTransactionUpdatesRequest,
    TimestampedTransactionUpdate
  >;
}

export interface StreamingServiceClient extends Client {
  subscribeUnprocessedPackets(
    request: SubscribePacketsRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribePacketsResponse>;
  subscribeUnprocessedPackets(
    request: SubscribePacketsRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribePacketsResponse>;
  subscribeTransactionUpdates(
    request: SubscribeTransactionUpdatesRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TimestampedTransactionUpdate>;
  subscribeTransactionUpdates(
    request: SubscribeTransactionUpdatesRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<TimestampedTransactionUpdate>;
}

export const StreamingServiceClient = makeGenericClientConstructor(
  StreamingServiceService,
  "streaming_service.StreamingService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): StreamingServiceClient;
  service: typeof StreamingServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToString(long: Long) {
  return long.toString();
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
