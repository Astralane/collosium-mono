// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v4.25.3
// source: bundle_exchange.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";
import { Bundle } from "./bundle";

export const protobufPackage = "bundle_exchange";

export interface BundleExchangeResponse {
  uuid: string;
}

function createBaseBundleExchangeResponse(): BundleExchangeResponse {
  return { uuid: "" };
}

export const BundleExchangeResponse = {
  encode(message: BundleExchangeResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.uuid !== "") {
      writer.uint32(10).string(message.uuid);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): BundleExchangeResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBundleExchangeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.uuid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BundleExchangeResponse {
    return { uuid: isSet(object.uuid) ? globalThis.String(object.uuid) : "" };
  },

  toJSON(message: BundleExchangeResponse): unknown {
    const obj: any = {};
    if (message.uuid !== "") {
      obj.uuid = message.uuid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BundleExchangeResponse>, I>>(base?: I): BundleExchangeResponse {
    return BundleExchangeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BundleExchangeResponse>, I>>(object: I): BundleExchangeResponse {
    const message = createBaseBundleExchangeResponse();
    message.uuid = object.uuid ?? "";
    return message;
  },
};

export type BundleExchangeService = typeof BundleExchangeService;
export const BundleExchangeService = {
  sendBundle: {
    path: "/bundle_exchange.BundleExchange/SendBundle",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: Bundle) => Buffer.from(Bundle.encode(value).finish()),
    requestDeserialize: (value: Buffer) => Bundle.decode(value),
    responseSerialize: (value: BundleExchangeResponse) => Buffer.from(BundleExchangeResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => BundleExchangeResponse.decode(value),
  },
} as const;

export interface BundleExchangeServer extends UntypedServiceImplementation {
  sendBundle: handleUnaryCall<Bundle, BundleExchangeResponse>;
}

export interface BundleExchangeClient extends Client {
  sendBundle(
    request: Bundle,
    callback: (error: ServiceError | null, response: BundleExchangeResponse) => void,
  ): ClientUnaryCall;
  sendBundle(
    request: Bundle,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: BundleExchangeResponse) => void,
  ): ClientUnaryCall;
  sendBundle(
    request: Bundle,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: BundleExchangeResponse) => void,
  ): ClientUnaryCall;
}

export const BundleExchangeClient = makeGenericClientConstructor(
  BundleExchangeService,
  "bundle_exchange.BundleExchange",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BundleExchangeClient;
  service: typeof BundleExchangeService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
